/*
 * dataSet - Test Support For Data Stores.
 *
 * Copyright (C) 2014-2015 Marko Umek (http://fail-early.com/contact)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */
apply plugin: 'idea'

version = '0.5'

ext {
    dataSetProjects = dataSetProjects.split(/,/)
    destinationDir = targetDir.endsWith('/') ? targetDir : targetDir + '/'
    allProjectDirs = dataSetProjects.inject([]) { result, project ->
        result.add(new File(destinationDir + project))
        result
    }

    logger.debug 'All project directories: ' + allProjectDirs
}

task wrapper(type: Wrapper, description:'Install gradle wrapper') {
  gradleVersion = gradleWrapperVersion
}

repositories {
    mavenCentral()
}

task cloneProjects(description:'Clone all dataSet projects from github') {
    outputs.dir allProjectDirs
    doLast {
        dataSetProjects.each { project ->
            cloneProject(new File(destinationDir + project), project)
        }
    }
}

task installParentGradle(dependsOn:'cloneProjects', description:'Create parent project') {
    outputs.dir allProjectDirs
    doLast {
        installGradleProject(destinationDir)
    }
}

task install(dependsOn: 'installParentGradle', description:'Install dataset projects in ' + destinationDir)

task update(description: 'Update projects and gradle parent') {
    doFirst {
        dataSetProjects.each { project ->
            cloneProject(new File(destinationDir + project), project)
        }
    }
    doLast {
        installGradleProject(destinationDir)
    }
}

def cloneProject(directory, project) {
    logger.debug("Clone project $project into $directory")
    if (!directory.exists()) {
        def result = exec {
            commandLine("git", "clone", "https://github.com/loddar/${project}.git", directory)
        }
        logger.quiet("Cloning '$project' into '$directory' done with $result")
    } else {
        logger.warn("Project directory '$directory' exists! Ignored!")
    }
}

def installGradleProject(directory) {
    logger.quiet "Install parent gradle project in directory '$directory'."
    // gradle build scripts
    def buildScripts=fileTree('src')
    buildScripts.include('*.gradle')
    buildScripts.include('*.properties')
    copy {
        from buildScripts
        into directory
        expand(gradleWrapperVersion: "$gradleWrapperVersion", projects: generateProjects(), version : "$dataSetVersion")
    }
    // gradle wrapper files
    def gradlewFiles=fileTree('.')
    gradlewFiles.include('gradlew')
    gradlewFiles.include('gradlew.bat')
    gradlewFiles.include('gradle/**')
    copy {
        from gradlewFiles
        into directory
    }
}


def generateProjects() {
    def newLine = System.getProperty("line.separator")
    dataSetProjects.inject('') { val, proj ->
        val + "include ':$proj'$newLine"
    }
}
